#!/bin/bash
# these are going to be replaced by the terraform script
[ENVIRONMENT_VARIABLES]
if [ "$VAR_NODE_TYPE" == "master" ] 
then
# install dependencies
apt-get update
apt-get install git -y
fi

if [ "$VAR_NODE_TYPE" == "master" ] || [ "$VAR_NODE_TYPE" == "normal" ] 
then
if ! [ -e "/data/ssd" ]
then
# this formats and mounts the secondary disk to /data/ssd
mkdir -p /data/ssd
echo ',,linux' | sfdisk /dev/sdb
mkfs.ext4 /dev/sdb1
echo '/dev/sdb1 /data/ssd ext4 defaults 0 0' >> /etc/fstab
systemctl daemon-reload
mount -a
fi
fi

cat > /usr/bin/k3s-startup.sh <<'END'
#!/bin/bash
# these are going to be replaced by the terraform script
[ENVIRONMENT_VARIABLES]
if [ "$VAR_NODE_TYPE" == "master" ] 
then
# create needed folders
mkdir -p /etc/rancher/k3s
mkdir -p /var/lib/rancher/k3s/server/manifests
# modify kubelet configuration to lower image caching
cat > /etc/rancher/k3s/kubelet.config <<EOF
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
imageGCHighThresholdPercent: 60
imageGCLowThresholdPercent: 50
EOF
# setup k3s configuration file
cat > /etc/rancher/k3s/config.yaml <<EOF
write-kubeconfig-mode: "0644"
node-label: 
  type=$VAR_NODE_TYPE
disable:
  - traefik
disable-helm-controller: true
kubelet-arg: "config=/etc/rancher/k3s/kubelet.config"
EOF
# a storage class to use the 2nd disk of the machine
cat > /var/lib/rancher/k3s/server/manifests/storage-class.yaml <<EOF
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-path-ssd
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: rancher.io/local-path
parameters:
  nodePath: /data/ssd
  pathPattern: "{{ .PVC.Namespace }}/{{ .PVC.Name }}"
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
EOF
fi

if [ "$VAR_NODE_TYPE" == "master" ] 
then
# this installs k3s; the token is generated by the terraform script
curl -sfL https://get.k3s.io | K3S_TOKEN=$VAR_K3S_TOKEN sh -s
# installs argocd
git clone https://github.com/Societatea-Hermes/hermes-on-kubernetes.git --branch main
kubectl apply -k ./hermes-on-kubernetes/helmcharts/argocd/overlays/ -n argocd
rm -rf hermes-on-kubernetes
# update kubeconfig
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
else
curl -sfL https://get.k3s.io | K3S_URL=https://VAR_MASTER_NAME K3S_TOKEN=$VAR_K3S_TOKEN sh -s
fi
END

chmod +x /usr/bin/k3s-startup.sh

cat > /lib/systemd/system/k3s-startup.service <<'END'
[Unit]
Description=K3s startup script

[Service]
ExecStart=/usr/bin/k3s-startup.sh

[Install]
WantedBy=multi-user.target
END

systemctl daemon-reload && systemctl enable k3s-startup && systemctl start k3s-startup

# install debugging tools
curl -sS https://webinstall.dev/k9s | bash
source ~/.config/envman/PATH.env